
/**
 * Class for managing a series of popups with incremental questions.
 * Data from the previous popup is handed to the next popup's initialization function, allowing incremental buildup.
 * @param popups Array of functions which return Webix configurations to be displayed in the popup. Arguments to these functions are: 
 *                1. next - Success function: should be called with argument data when the next popup should be displayed.
 *                2. cancel - Error/cancel function: should be called when the wizard is interrupted or cancelled.
 *                3. data - Data from the previous popup to be used in initialisation.
 * @param callback This function is called when every popup is shown. It contains the data generated by the last popup.
 */
class WizardManager {

    constructor(popups, callback=undefined) {
        this.popups = popups;
        this.current_popup_id = 0;
        this.data = []

      
        this.popup_config = {
            id: "wizard_popup",
            view: "popup",
            height: 500,
            width: 750,
            minWidth: 450,
            position: "center",
            head: "My Window",
            modal: true
          }
        
        this.callback = callback;
    }

    // Generates the 'next' argument for the popup initialisation. This function gets called every time a popup wishes to advance to the next stage.
    next() {
        return (data) => {
          this.data[this.current_popup_id] = data;

          if (this.popup)
            this.popup.close();

          if (this.popups.length <= this.current_popup_id) {
            // There are no more popups left. We can quit the manager.

            if(this.callback) {
              // If we expect result data from the wizard, return it.
              this.callback(data);
            }
            return;
          }

          this.popup = webix.ui({
            ...this.popup_config,
            body: this.popups[this.current_popup_id](this.next(), (options) => this.close(options), this.data[this.current_popup_id])
          });

          this.current_popup_id += 1;
          setTimeout(() => this.popup.show(), 50);
        }
    }

    // Shows the wizard. Analogous to webix's 'show'
    show(data) {
      this.data[this.current_popup_id] = data;
      this.next()(data);
    }

    // Closes the wizard.
    close(options) {
      this.popup.close();
      if(options && options.reset) {
        this.current_popup_id = 0
        this.show(this.data)
      }
      if(options && options.back) {
        this.current_popup_id -= 2;
        this.show(this.data[this.current_popup_id])
      }
    }

}
